---
- name: Setup Ansible AWX
  hosts: all
  become: true

  vars:
    metallb_ip_range: 192.168.5.16-192.168.5.20
    awx_domain: awx.example.org
    # acme_directory: https://acme-v02.api.letsencrypt.org/directory  # Let's Encrypt Production
    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory  # Let's Encrypt Staging
    acme_email: "foo@example.org"
    acme_acme_dns_server: https://auth.acme-dns.io
    acme_acme_dns_credentials_file: "/root/acmedns.json"

  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

  tasks:
    - name: Install python3-kubernetes
      ansible.builtin.apt:
        name: python3-kubernetes
        update_cache: true
        state: present

    - name: Install k3s as single node cluster
      ansible.builtin.shell:
        executable: /bin/bash
        creates: /usr/local/bin/k3s
        cmd: |
          set -o pipefail
          curl -sfL https://get.k3s.io | sh -
      changed_when: false

    - name: Download Helm installation script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0700'

    - name: Run Helm installation script
      ansible.builtin.command: /tmp/get_helm.sh
      args:
        creates: /usr/local/bin/helm  # Prevents re-execution if Helm is already installed

    - name: Get architecture
      ansible.builtin.command:
        cmd: dpkg --print-architecture
      changed_when: false
      register: deb_architecture

    - name: Install k9s
      ansible.builtin.apt:
        deb: "https://github.com/derailed/k9s/releases/download/v0.32.7/k9s_linux_{{ deb_architecture.stdout }}.deb"

    - name: Configure kubectl
      ansible.builtin.lineinfile:
        dest: /root/.bashrc
        line: export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        owner: root
        group: root
        mode: "0750"
        state: present
        insertafter: EOF
        create: true

    - name: Manage longhorn installation
      tags: longhorn
      block:
        - name: Install OS dependencies
          ansible.builtin.apt:
            name:
              - open-iscsi
            state: present

        - name: Add longhorn Helm repo
          kubernetes.core.helm_repository:
            name: longhorn
            repo_url: https://charts.longhorn.io

        - name: Install longhorn
          kubernetes.core.helm:
            release_state: present
            release_name: longhorn
            release_namespace: longhorn-system
            release_values: "{{ lookup('ansible.builtin.template', '../templates/manifests/longhorn/values.yml.j2') | from_yaml }}"
            create_namespace: true
            chart_ref: longhorn/longhorn
            chart_version: v1.6.1
            wait: true

        - name: Disable default local-path StorageClass
          kubernetes.core.k8s:
            api_version: storage.k8s.io/v1
            kind: StorageClass
            name: local-path
            merge_type: merge
            resource_definition:
              metadata:
                annotations:
                  storageclass.kubernetes.io/is-default-class: "false"

        - name: Disable default local-path StorageClass on disk
          ansible.builtin.lineinfile:
            path: /var/lib/rancher/k3s/server/manifests/local-storage.yaml  # Replace with the actual file path
            regexp: '^(\s*storageclass\.kubernetes\.io/is-default-class:\s*"true")'
            line: '# \1'
            backrefs: true

    - name: Add MetalLB Helm repo
      kubernetes.core.helm_repository:
        name: metallb
        repo_url: https://metallb.github.io/metallb

    - name: Install MetalLB
      kubernetes.core.helm:
        release_state: present
        release_name: metallb
        release_namespace: metallb-system
        release_values: "{{ lookup('ansible.builtin.template', '../templates/manifests/metallb/values.yml.j2') | from_yaml }}"
        create_namespace: true
        chart_ref: metallb/metallb
        chart_version: v0.14.5
        wait: true

    - name: Configure MetalLB IP pool
      kubernetes.core.k8s:
        state: present
        template:
          path: '../templates/manifests/metallb/pool.yml.j2'
          variable_start_string: '[['
          variable_end_string: ']]'

    - name: Configure MetalLB IP pool advertisement
      kubernetes.core.k8s:
        state: present
        template:
          path: '../templates/manifests/metallb/advertisement.yml.j2'
          variable_start_string: '[['
          variable_end_string: ']]'

    - name: Add cert-manager Helm repo
      kubernetes.core.helm_repository:
        name: cert-manager
        repo_url: https://charts.jetstack.io

    - name: Install cert-manager
      kubernetes.core.helm:
        release_state: present
        release_name: cert-manager
        release_namespace: cert-manager
        release_values: "{{ lookup('ansible.builtin.template', '../templates/manifests/cert-manager/values.yml.j2') | from_yaml }}"
        create_namespace: true
        chart_ref: cert-manager/cert-manager
        chart_version: v1.16.2
        wait: true

    - name: Handle acme-dns account registration
      tags: acme-dns
      block:
        - name: Check if acme-dns credentials are present
          ansible.builtin.stat:
            path: "{{ acme_acme_dns_credentials_file }}"
          register: acme_acme_dns_credentials_file_status

        - name: Register acme-dns account
          ansible.builtin.uri:
            url: "{{ acme_acme_dns_server }}/register"
            method: POST
            body: {}
            headers:
              Content-Type: "application/json"
            return_content: true
            status_code:
              - 201
          register: acme_acme_dns_response
          when: not acme_acme_dns_credentials_file_status.stat.exists

        - name: Save acme-dns credentials to file
          ansible.builtin.copy:
            content: "{{ acme_acme_dns_response.json | to_yaml }}"
            dest: "{{ acme_acme_dns_credentials_file }}"
            owner: root
            group: root
            mode: "0750"
          when: not acme_acme_dns_credentials_file_status.stat.exists

        - name: Load acme-dns credentials from file
          ansible.builtin.slurp:
            src: "{{ acme_acme_dns_credentials_file }}"
          register: acme_acme_dns_credentials

    - name: Handle cert-manager configuration
      tags: acme-dns
      block:
        - name: Set cert-manager acme-dns secret fact
          ansible.builtin.set_fact:
            acmedns_json: "{{ {awx_domain: acmedns_json_content} | to_nice_json }}"
          vars:
            acmedns_json_content: "{{ acme_acme_dns_credentials['content'] | b64decode | from_yaml }}"

        - name: Create cert-manager acme-dns secret
          kubernetes.core.k8s:
            state: present
            template:
              path: '../templates/manifests/cert-manager/issuer_secret.yml.j2'
              variable_start_string: '[['
              variable_end_string: ']]'

        - name: Create cert-manager ClusterIssuer
          kubernetes.core.k8s:
            state: present
            template:
              path: '../templates/manifests/cert-manager/issuer.yml.j2'
              variable_start_string: '[['
              variable_end_string: ']]'
